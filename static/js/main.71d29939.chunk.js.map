{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","employees","columns","Header","accessor","Cell","props","className","value","filterable","sortable","minWidth","employeeState","setEmployeeState","useEffect","axios","get","then","data","console","log","results","map","individual","name","first","last","email","phone","picture","src","thumbnail","alt","address","location","city","country","resolveData","row","pageSizeOptions","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OAkFeA,G,MA7EH,WAAM,MAG0BC,mBAAS,CACjDC,UAAW,GACXC,QAAS,CACP,CACEC,OAAQ,QACRC,SAAU,UACVC,KAAM,SAAAC,GAAK,OAAI,0BAAMC,UAAU,UAAUD,EAAME,QAC/CC,YAAY,EACZC,UAAU,EACVC,SAAU,IAEZ,CACER,OAAQ,OACRC,SAAU,OACVC,KAAM,SAAAC,GAAK,OAAI,0BAAMC,UAAU,UAAUD,EAAME,QAC/CC,YAAY,GAEd,CACEN,OAAQ,QACRC,SAAU,QACVC,KAAM,SAAAC,GAAK,OAAI,0BAAMC,UAAU,UAAUD,EAAME,QAC/CC,YAAY,GAEd,CACEN,OAAQ,QACRC,SAAU,QACVC,KAAM,SAAAC,GAAK,OAAI,0BAAMC,UAAU,UAAUD,EAAME,QAC/CC,YAAY,GAEd,CACEN,OAAQ,UACRC,SAAU,UACVC,KAAM,SAAAC,GAAK,OAAI,0BAAMC,UAAU,UAAUD,EAAME,QAC/CC,YAAY,MApCF,mBAGTG,EAHS,KAGMC,EAHN,KA8DhB,OAfAC,qBAAU,WACRC,IAAMC,IAAI,wCACPC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPC,QAAQC,IAAIF,EAAKG,SACjBR,EAAiB,2BAAKD,GAAN,IAAqBX,UAAWiB,EAAKG,QAAQC,KAAI,SAAAC,GAAU,MAAK,CAC9EC,KAAK,GAAD,OAAKD,EAAWC,KAAKC,MAArB,YAA8BF,EAAWC,KAAKE,MAClDC,MAAOJ,EAAWI,MAClBC,MAAOL,EAAWK,MAClBC,QAAS,yBAAKC,IAAKP,EAAWM,QAAQE,UAAWC,IAAKT,EAAWC,KAAKC,QACtEQ,QAAQ,GAAD,OAAKV,EAAWW,SAASC,KAAzB,aAAkCZ,EAAWW,SAASE,qBAIlE,IAGD,oCACE,kDAEA,kBAAC,IAAD,CACElB,KAAMN,EAAcX,UACpBC,QAASU,EAAcV,QACvBmC,YAAa,SAAAnB,GAAI,OAAIA,EAAKI,KAAI,SAAAgB,GAAG,OAAIA,MACrCC,gBAAiB,CAAC,EAAG,EAAG,GAAI,GAAI,IAChC9B,YAAY,OChEA+B,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.71d29939.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport ReactTable from \"react-table-v6\"\nimport 'react-table-v6/react-table.css'\n\nconst App = () => {\n\n  // Employee State\n  const [employeeState, setEmployeeState] = useState({\n    employees: [],\n    columns: [\n      {\n        Header: 'Photo',\n        accessor: 'picture',\n        Cell: props => <span className='number'>{props.value}</span>,\n        filterable: false,\n        sortable: false,\n        minWidth: 15\n      },\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: props => <span className='number'>{props.value}</span>,\n        filterable: true\n      },\n      {\n        Header: 'Email',\n        accessor: 'email',\n        Cell: props => <span className='number'>{props.value}</span>,\n        filterable: true\n      },\n      {\n        Header: 'Phone',\n        accessor: 'phone',\n        Cell: props => <span className='number'>{props.value}</span>,\n        filterable: true\n      },\n      {\n        Header: 'Address',\n        accessor: 'address',\n        Cell: props => <span className='number'>{props.value}</span>,\n        filterable: true,\n      }\n    ]\n  })\n\n  // // For Debugging\n  // employeeState.button = event => {\n  //   console.log(employeeState.employees)\n  // }\n\n\n  useEffect(() => {\n    axios.get('https://randomuser.me/api?results=20')\n      .then(({ data }) => {\n        console.log(data.results)\n        setEmployeeState({ ...employeeState, employees: data.results.map(individual => ({\n          name: `${individual.name.first} ${individual.name.last}`,\n          email: individual.email,\n          phone: individual.phone,\n          picture: <img src={individual.picture.thumbnail} alt={individual.name.first} />,\n          address: `${individual.location.city}, ${individual.location.country}`\n        }))\n      })\n      })\n  }, [])\n\n  return (\n    <>\n      <h1>Employee Directory</h1>\n      {/* <button onClick={employeeState.button}>See States</button> */}\n      <ReactTable\n        data={employeeState.employees}\n        columns={employeeState.columns}\n        resolveData={data => data.map(row => row)}\n        pageSizeOptions={[1, 5, 10, 15, 20]}\n        filterable={true}\n      />\n    </>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}